// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:

    DMux (in=load, sel=address[0], a=dataLoad, b=screenOrKeyboardLoad);
    DMux (in=screenOrKeyboardLoad, sel=address[1], a=screenLoad, b=keyboardLoad);
    

    // Data memory (0-16,383 i.e. 2^14 size)
    // 000000000000000 - 011111111111111
    RAM16K (in=in, load=dataLoad, address=address[1..14], out=dataOut);

    // Screen memory (16,384-24,575 i.e. 2^13 size)
    // 100000000000000 - 101111111111111
    RAM8K (in=in, load=screenLoad, address=address[2..14], out=screenOut);
    
    
    // Keyboard memory (24,576)
    // 110000000000000
    Register (in=in, load=keyboardLoad, out=keyboardOut);

    Mux16 (a=screenOut, b=keyboardOut, sel=address[1], out=screenOrKeyboardOut);
    Mux16 (a=dataOut, b=screenOrKeyboardOut, sel=address[0], out=out); 
}